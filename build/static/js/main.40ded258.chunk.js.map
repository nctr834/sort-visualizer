{"version":3,"sources":["SortAlgos/sortingAlgos.js","SortVisualizer/SortVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["mergeSortHelper","arr","auxiliary","animations","left","right","middle","Math","floor","mergeHalves","i","leftIndex","rightIndex","currentIndex","push","quickSortHelper","pivot","swap","heapSortHelper","heapSize","length","heapify","largest","j","temp","BAR_NUMBER","window","innerWidth","BAR_NUMBER_MAX","ANIMATION_SPEED","ANIMATION_MULTIPLIER","ALG_NAME","ALG_TC","ALG_SC","FAST_MODE","SLOW_MODE","SortVisualizer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","array","sorting","stop","resetArray","_this2","addEventListener","button_class","new_array_button","speed_button","slider","react_default","a","createElement","className","onClick","location","reload","selectionSort","bubbleSort","insertionSort","shellSort","mergeSort","quickSort","heapSort","countingSort","type","min","max","value","onChange","e","target","map","num","key","style","height","concat","width","randNum","random","includes","setState","fixColor","toConsumableArray","SortAlgos","modTwoSort","gap","apply","count","Array","fill","output","_this3","document","getElementsByClassName","backgroundColor","setTimeout","_loop","Infinity","_this4","slice","_loop2","arrayBars","_animations$i","slicedToArray","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","switchColor","_animations$i2","newHeight","sortedColor","_this5","minIndex","currIdx","prevBarTwoIdx","_animations$i3","_animations$i4","barOneVal","barTwoVal","swapHeight","_this6","prevBarOneIdx","countPivots","_animations$i5","modTwoIsZero","modTwoIsOne","_this7","_animations$i6","_this8","_this9","React","Component","App","SortVisualizer_SortVisualizer_SortVisualizer","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.40ded258.chunk.js","sourcesContent":["/* This file contains the implementation of various sorting algorithms.\r\nWithin each sorting algorithm, an animations array is created to store\r\nthe indices and values of the array that are being compared, swapped, or\r\noverwritten. When the animations array is returned, it is used to animate\r\nthe sorting process by modifying the array bars' heights and colors accordingly. */\r\n\r\n/*  Selection sort sorts an array by repeatedly:\r\n        finding the smallest element (from i+1 to arr.length-1)\r\n        and putting it at i. */\r\nexport const selectionSort = (arr) => {\r\n    const animations = [];\r\n    for (let i = 0; i < arr.length; i++) {\r\n        let minIndex = i;\r\n        // Find the smallest element in the array\r\n        for (let j = i + 1; j < arr.length; j++) {\r\n            if (arr[j] < arr[minIndex]) {\r\n                minIndex = j;\r\n            }\r\n            // When indices are pushed, it is to change color of the relevant bars.\r\n            animations.push([minIndex, j]);\r\n            animations.push([minIndex, j]);\r\n        }\r\n        // Swap the smallest element with i if minIndex != i\r\n        if (minIndex !== i) {\r\n            // When values are pushed, it is to swap (or just change) the heights of the relevant bars.\r\n            animations.push([arr[i], arr[minIndex]]);\r\n            swap(arr, i, minIndex);\r\n        }\r\n        else {\r\n            animations.push([arr[i], arr[i]]);\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\n/*  Bubble sort sorts an array by repeatedly:\r\n        swapping arr[j] & arr[j+1] until j reaches arr.length - i - 1. */\r\nexport const bubbleSort = (arr) => {\r\n    const animations = [];\r\n    for (let i = 0; i < arr.length; i++) {\r\n        let j;\r\n        // When arr[j] > arr[j+1], swap them\r\n        for (j = 0; j < arr.length - i - 1; j++) {\r\n            animations.push([j + 1, j]);\r\n            animations.push([Math.min(arr[j], arr[j + 1]), Math.max(arr[j], arr[j + 1])]);\r\n            if (arr[j] > arr[j + 1]) {\r\n                swap(arr, j, j + 1);\r\n            }\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\n/*  Insertion sort sorts an array by repeatedly putting arr[j] in front of the value smaller than it in the\r\n    range 0 to i. 0 to i is always sorted as a result; once i reaches arr.length-1, the array is sorted. */\r\nexport const insertionSort = (arr) => {\r\n    const animations = [];\r\n    for (let i = 1; i < arr.length; i++) {\r\n        let j = i;\r\n        // Swap arr[j] with the value smaller than it (arr[j-1])\r\n        while (j > 0 && arr[j] < arr[j - 1]) {\r\n            animations.push([j, j - 1]);\r\n            animations.push([arr[j], arr[j - 1]]);\r\n            swap(arr, j, j - 1);\r\n            j--;\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n/* Shell sort sorts an array by repeatedly:\r\n        sorting subarrays of arr with a gap of Math.floor(arr.length / 2).\r\n    This algorithm is an improvement of insertion sort (it also swaps elements that have a long distance\r\n    (index-wise)) since it sorts subarrays instead of the whole array (as partially sorted arrays are sorted faster\r\n     than O(n^2)). */\r\nexport const shellSort = (arr) => {\r\n    const animations = [];\r\n    let gap = Math.floor(arr.length / 2);\r\n    while (gap > 0) {\r\n        for (let i = gap; i < arr.length; i++) {\r\n            let j = i;\r\n            // Swap arr[j] with the value smaller than it (arr[j-gap])\r\n            while (j >= gap && arr[j] < arr[j - gap]) {\r\n                animations.push([j, j - gap]);\r\n                animations.push([arr[j], arr[j - gap]]);\r\n                swap(arr, j, j - gap);\r\n                j -= gap;\r\n            }\r\n        }\r\n        // Reduce the gap (by half)\r\n        gap = Math.floor(gap / 2);\r\n    }\r\n    return animations;\r\n}\r\n\r\n/* Merge sort sorts an array by repeatedly:\r\n        dividing the array into two halves,\r\n        sorting the two halves,\r\n        and merging the two halves. */\r\nexport const mergeSort = (arr) => {\r\n    const auxiliary = arr.slice();\r\n    const animations = [];\r\n    mergeSortHelper(arr, auxiliary, animations, 0, arr.length - 1);\r\n    return animations;\r\n}\r\nexport const mergeSortHelper = (arr, auxiliary, animations, left, right) => {\r\n    if (left === right) return;\r\n    const middle = Math.floor((left + right) / 2);\r\n    // Sort the left half\r\n    mergeSortHelper(arr, auxiliary, animations, left, middle);\r\n    // Sort the right half\r\n    mergeSortHelper(arr, auxiliary, animations, middle + 1, right);\r\n    mergeHalves(arr, auxiliary, animations, left, middle, right);\r\n}\r\nexport const mergeHalves = (arr, auxiliary, animations, left, middle, right) => {\r\n    // Copy the array to auxiliary\r\n    for (let i = left; i <= right; i++) {\r\n        auxiliary[i] = arr[i];\r\n    }\r\n    let leftIndex = left;\r\n    let rightIndex = middle + 1;\r\n    let currentIndex = left;\r\n    while (leftIndex <= middle && rightIndex <= right) {\r\n        animations.push([leftIndex, rightIndex]);\r\n        animations.push([leftIndex, rightIndex]);\r\n        // If the left value is smaller, push assign it to arr[currentIndex],\r\n        // otherwise assign the right value to arr[currentIndex]\r\n        if (auxiliary[leftIndex] <= auxiliary[rightIndex]) {\r\n            animations.push([currentIndex, auxiliary[leftIndex]]);\r\n            arr[currentIndex++] = auxiliary[leftIndex++];\r\n        } else {\r\n            animations.push([currentIndex, auxiliary[rightIndex]]);\r\n            arr[currentIndex++] = auxiliary[rightIndex++];\r\n        }\r\n    }\r\n    // If there are still values in the left half, push them to arr[currentIndex]\r\n    while (leftIndex <= middle) {\r\n        animations.push([leftIndex, leftIndex]);\r\n        animations.push([leftIndex, leftIndex]);\r\n        animations.push([currentIndex, auxiliary[leftIndex]]);\r\n        arr[currentIndex++] = auxiliary[leftIndex++];\r\n    }\r\n    // If there are still values in the right half, push them to arr[currentIndex]\r\n    while (rightIndex <= right) {\r\n        animations.push([rightIndex, rightIndex]);\r\n        animations.push([rightIndex, rightIndex]);\r\n        animations.push([currentIndex, auxiliary[rightIndex]]);\r\n        arr[currentIndex++] = auxiliary[rightIndex++];\r\n    }\r\n}\r\n\r\n/*  Quick sort sorts an array by repeatedly:\r\n        setting a pivot (Math.floor((left + right) / 2)),\r\n        putting all values smaller than the pivot value to the left of it,\r\n        putting all values larger than the pivot value to the right of it,\r\n        and sorting the left and right halves. */\r\nexport const quickSort = (arr) => {\r\n    const animations = [];\r\n    quickSortHelper(arr, 0, arr.length - 1, animations);\r\n    return animations;\r\n}\r\nexport const quickSortHelper = (arr, left, right, animations) => {\r\n    if (left >= right) return;\r\n    const middle = Math.floor((left + right) / 2);\r\n    const pivot = arr[middle];\r\n    // pivot animation\r\n    animations.push([middle, -1]);\r\n    let leftIndex = left;\r\n    let rightIndex = right;\r\n    while (leftIndex <= rightIndex) {\r\n        // Find the first value that is larger than the pivot value\r\n        while (arr[leftIndex] < pivot) {\r\n            leftIndex++;\r\n        }\r\n        // Find the first value that is smaller than the pivot value\r\n        while (arr[rightIndex] > pivot) {\r\n            rightIndex--;\r\n        }\r\n        // Swap arr[leftIndex] and arr[rightIndex] if leftIndex <= rightIndex (larger value should be on the right)\r\n        if (leftIndex <= rightIndex) {\r\n            animations.push([leftIndex, rightIndex]);\r\n            animations.push([arr[leftIndex], arr[rightIndex]]);\r\n            swap(arr, leftIndex, rightIndex);\r\n            leftIndex++;\r\n            rightIndex--;\r\n        }\r\n    }\r\n    // Sort the left and right halves\r\n    quickSortHelper(arr, left, rightIndex, animations);\r\n    quickSortHelper(arr, leftIndex, right, animations);\r\n}\r\n\r\n/*  Heap sort sorts an array by repeatedly:\r\n        building a max heap,\r\n        swapping the first and last values,\r\n        and reducing the heap size by 1. */\r\nexport const heapSort = (arr) => {\r\n    const animations = [];\r\n    heapSortHelper(arr, animations);\r\n    return animations;\r\n}\r\nexport const heapSortHelper = (arr, animations) => {\r\n    const heapSize = arr.length;\r\n    // Build the max heap\r\n    for (let i = Math.floor(heapSize / 2) - 1; i >= 0; i--) {\r\n        heapify(arr, heapSize, i, animations);\r\n    }\r\n    // Swap the first and last values, and reduce the heap size by 1\r\n    for (let i = heapSize - 1; i > 0; i--) {\r\n        animations.push([0, i]);\r\n        animations.push([arr[0], arr[i]]);\r\n        swap(arr, 0, i);\r\n        heapify(arr, i, 0, animations);\r\n    }\r\n}\r\n// Heapify the subtree (which is rooted at index i)\r\nexport const heapify = (arr, heapSize, i, animations) => {\r\n    let left = 2 * i + 1;\r\n    let right = 2 * i + 2;\r\n    let largest = i;\r\n    // If the left child is larger than the parent, set the largest to the left child\r\n    if (left < heapSize && arr[left] > arr[largest]) {\r\n        largest = left;\r\n    }\r\n    // If the right child is larger than the parent, set the largest to the right child\r\n    if (right < heapSize && arr[right] > arr[largest]) {\r\n        largest = right;\r\n    }\r\n    // If the largest isn't the parent, swap the parent and largest then heapify the subtree\r\n    if (largest !== i) {\r\n        animations.push([i, largest]);\r\n        animations.push([arr[i], arr[largest]]);\r\n        swap(arr, i, largest);\r\n        heapify(arr, heapSize, largest, animations);\r\n    }\r\n}\r\n\r\n/*  Counting sort sorts an array by counting the number of times each value appears,\r\n        and then placing the values in the correct position (determined by the count). */\r\nexport const countingSort = (arr) => {\r\n    const animations = [];\r\n    // Find the max value in the array\r\n    const max = Math.max.apply(null, arr);\r\n    // Find the min value in the array\r\n    const min = Math.min.apply(null, arr);\r\n    // Create an array of length max - min + 1, and fill it with 0s\r\n    const range = max - min + 1;\r\n    const count = new Array(range).fill(0);\r\n    // Count the number of times each value - min appears in the array\r\n    for (let i = 0; i < arr.length; i++) {\r\n        animations.push([i, i]);\r\n        animations.push([arr[i], arr[i]]);\r\n        count[arr[i] - min]++;\r\n    }\r\n    // Add the previous count to the current count for each index\r\n    for (let i = 1; i < count.length; i++) {\r\n        count[i] += count[i - 1];\r\n    }\r\n    // Create a new array to store the sorted values\r\n    const output = new Array(arr.length);\r\n    // Place the values in the correct position\r\n    for (let i = arr.length - 1; i >= 0; i--) {\r\n        // Find the index of the value in the count array\r\n        output[count[arr[i] - min] - 1] = arr[i];\r\n        // Decrement the count for the value by 1 since the value has been placed in the output array.\r\n        // The next value with the same value will be placed in the next index\r\n        count[arr[i] - min]--;\r\n    }\r\n    // Copy the values from the output array to the original array\r\n    for (let i = 0; i < arr.length; i++) {\r\n        animations.push([i, i]);\r\n        animations.push([output[i], output[i]]);\r\n        arr[i] = output[i];\r\n    }\r\n    return animations;\r\n}\r\n\r\n//swap function for swapping values in an array\r\nexport const swap = (arr, i, j) => {\r\n    let temp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = temp;\r\n}\r\n","import React from 'react';\r\nimport './SortVisualizer.css';\r\nimport * as SortAlgos from '../SortAlgos/sortingAlgos';\r\n\r\nlet BAR_NUMBER = Math.floor(window.innerWidth / 6);\r\nlet BAR_NUMBER_MAX = BAR_NUMBER * 3;\r\nlet ANIMATION_SPEED = 400 / BAR_NUMBER;\r\nlet ANIMATION_MULTIPLIER = 1;\r\nlet ALG_NAME = 'Not Selected';\r\nlet ALG_TC = 'N/A';\r\nlet ALG_SC = 'N/A';\r\nlet FAST_MODE = 'Inactive';\r\nlet SLOW_MODE = 'Inactive';\r\n\r\nexport default class SortVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: [],\r\n            sorting: false,\r\n            stop: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    render() {\r\n        window.addEventListener('resize'\r\n            , () => {\r\n                BAR_NUMBER = Math.floor(window.innerWidth / 6);\r\n                BAR_NUMBER_MAX = BAR_NUMBER * 3;\r\n                ANIMATION_SPEED = 400 / BAR_NUMBER;\r\n                // eslint-disable-next-line\r\n                this.state.array = [];\r\n                this.resetArray();\r\n            });\r\n        const { array } = this.state;\r\n        let button_class = this.state.sorting ? \"grayedButton\" : \"normalButton\";\r\n        let new_array_button = this.state.sorting ? \"grayedButton\" : \"new\";\r\n        let speed_button = this.state.sorting ? \"grayedButton\" : \"other\";\r\n        let slider = this.state.sorting ? \"grayedSlider\" : \"normalSlider\";\r\n        return (\r\n            <div className=\"full\">\r\n                <div className=\"buttons\">\r\n                    <button onClick={() => { window.location.reload(false); }}>Reload</button>\r\n                    <div className={speed_button}>\r\n                        <style>\r\n                            {`\r\n                            .new {\r\n                                background-color: #EEE;\r\n                            }\r\n                            .other{ background-color:#DDD;}\r\n                            `}\r\n                        </style>\r\n                        <button className={new_array_button} onClick={() => { if (this.state.sorting) { return; } FAST_MODE = 'Inactive'; SLOW_MODE = 'Inactive'; this.resetArray() }}>New Array</button>\r\n                        <button className={speed_button} onClick={() => { if (this.state.sorting) { return; } SLOW_MODE = 'Active'; FAST_MODE = 'Inactive'; ANIMATION_SPEED = 150; this.resetArray() }}>Slow Mode</button>\r\n                        <button className={speed_button} onClick={() => { if (this.state.sorting) { return; } FAST_MODE = 'Active'; SLOW_MODE = 'Inactive'; ANIMATION_SPEED = .5; this.resetArray() }}>Fast Mode</button>\r\n\r\n                    </div>\r\n                    <button className={button_class} onClick={() => { ALG_NAME = 'Selection Sort'; ALG_TC = 'O(n^2)'; ALG_SC = 'O(1)'; ANIMATION_MULTIPLIER = 1; this.selectionSort(); }}>Selection</button>\r\n                    <button className={button_class} onClick={() => { ALG_NAME = 'Bubble Sort'; ALG_TC = 'O(n^2)'; ALG_SC = 'O(1)'; ANIMATION_MULTIPLIER = 1; this.bubbleSort() }}>Bubble</button>\r\n                    <button className={button_class} onClick={() => { ALG_NAME = 'Insertion Sort'; ALG_TC = 'O(n^2)'; ALG_SC = 'O(1)'; ANIMATION_MULTIPLIER = 1; this.insertionSort() }}>Insertion</button>\r\n                    <button className={button_class} onClick={() => { ALG_NAME = 'Shell Sort'; ALG_TC = 'O(n*(log(n))^2)'; ALG_SC = 'O(1)'; ANIMATION_MULTIPLIER = .33; this.shellSort() }}>Shell</button>\r\n                    <button className={button_class} onClick={() => { ALG_NAME = 'Merge Sort'; ALG_TC = 'O(n*log(n))'; ALG_SC = 'O(n)'; ANIMATION_MULTIPLIER = 1; this.mergeSort(); }}>Merge</button>\r\n                    <button className={button_class} onClick={() => { ALG_NAME = 'Quick Sort'; ALG_TC = 'O(n*log(n))'; ALG_SC = 'O(log(n))'; ANIMATION_MULTIPLIER = .33; this.quickSort() }}>Quick</button>\r\n                    <button className={button_class} onClick={() => { ALG_NAME = 'Heap Sort'; ALG_TC = 'O(n*log(n))'; ALG_SC = 'O(1)'; ANIMATION_MULTIPLIER = .33; this.heapSort() }}>Heap</button>\r\n                    <button className={button_class} onClick={() => { ALG_NAME = 'Counting Sort'; ALG_TC = 'O(n + range)'; ALG_SC = 'O(range)'; ANIMATION_MULTIPLIER = .33; this.countingSort() }}>Counting</button>\r\n\r\n                    <style>\r\n                        {`\r\n                            .grayedButton {\r\n                                background-color: #EEE;\r\n                            color: #AAA;\r\n                    }\r\n                            .normalButton {\r\n                                background-color: #CCC;\r\n                            color: #230;\r\n                    }\r\n                            .grayedSlider {\r\n                                background-color: #DDD;\r\n                    }\r\n                `}</style>\r\n\r\n                </div >\r\n                <div className=\"slider\">\r\n                    <h3>Size & Speed Slider<br></br>Array Size: {BAR_NUMBER}</h3>\r\n                    <input\r\n                        type=\"range\"\r\n                        min=\"10\"\r\n                        max={(window.innerWidth / 3)}\r\n                        value={BAR_NUMBER}\r\n                        className={slider}\r\n                        onChange={(e) => {\r\n                            if (this.state.sorting) return;\r\n\r\n                            BAR_NUMBER = e.target.value;\r\n                            BAR_NUMBER_MAX = BAR_NUMBER * 3;\r\n                            ANIMATION_SPEED = 400 / BAR_NUMBER;\r\n                            if (FAST_MODE === 'Active') {\r\n                                ANIMATION_SPEED = .5;\r\n                            }\r\n                            if (SLOW_MODE === 'Active') {\r\n                                ANIMATION_SPEED = 150;\r\n                            }\r\n                            // eslint-disable-next-line\r\n                            this.state.array = [];\r\n                            this.resetArray();\r\n                        }}\r\n                    />\r\n                    <div className=\"alg-info\">\r\n                        <div className=\"alg-info-analysis\">\r\n                            <p>Algorithm: {ALG_NAME}</p>\r\n                            <p>Average Time Complexity: {ALG_TC}</p>\r\n                            <p>Worst-Case Space Complexity: {ALG_SC}</p>\r\n                            <p>Slow Mode: {SLOW_MODE}</p>\r\n                            <p>Fast Mode: {FAST_MODE}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"array-container\">\r\n                    {\r\n                        array.map((num, i) => (\r\n                            <div className=\"array-bar\"\r\n                                key={i}\r\n                                style={\r\n                                    {\r\n                                        height: `${num}px`,\r\n                                        width: `${(window.innerWidth / 3 / BAR_NUMBER) * Math.floor(BAR_NUMBER_MAX / BAR_NUMBER) - 2}px`\r\n                                    }\r\n                                }>\r\n                            </div >\r\n                        ))\r\n                    }\r\n                </div >\r\n            </div >\r\n        );\r\n    }\r\n\r\n    resetArray() {\r\n        if (this.state.sorting) return;\r\n        const array = [];\r\n        let i = 0;\r\n        while (i < BAR_NUMBER) {\r\n            let randNum = Math.floor(Math.random() * 2 * 100 + 1);\r\n            if (!array.includes(randNum)) {\r\n                array.push(randNum * 2);\r\n                i++;\r\n            }\r\n        }\r\n        ALG_NAME = 'Not Selected';\r\n        ALG_TC = 'N/A';\r\n        ALG_SC = 'N/A';\r\n        this.setState({ array: array });\r\n        this.fixColor();\r\n    }\r\n\r\n    bubbleSort() {\r\n        if (this.state.sorting) return;\r\n        this.setState({ sorting: true, array: [...this.state.array] });\r\n\r\n        const animations = SortAlgos.bubbleSort(this.state.array);\r\n        this.modTwoSort(animations);\r\n    }\r\n\r\n    insertionSort() {\r\n        if (this.state.sorting) return;\r\n        this.setState({ sorting: true, array: [...this.state.array] });\r\n\r\n        const animations = SortAlgos.insertionSort(this.state.array);\r\n        this.modTwoSort(animations);\r\n    }\r\n    shellSort() {\r\n        if (this.state.sorting) return;\r\n        this.setState({ sorting: true, array: [...this.state.array] });\r\n\r\n        const animations = SortAlgos.shellSort(this.state.array);\r\n        this.modTwoSort(animations);\r\n    }\r\n\r\n    heapSort() {\r\n        if (this.state.sorting) return;\r\n        this.setState({ sorting: true, array: [...this.state.array] });\r\n\r\n        const animations = SortAlgos.heapSort(this.state.array);\r\n        this.modTwoSort(animations);\r\n    }\r\n\r\n    countingSort() {\r\n        if (this.state.sorting) return;\r\n        this.setState({ sorting: true, array: [...this.state.array] });\r\n\r\n        const animations = SortAlgos.countingSort(this.state.array);\r\n        this.modTwoSort(animations);\r\n    }\r\n\r\n    //change color of bars  when sorted\r\n    sortedColor() {\r\n        for (let i = 0; i < this.state.array.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            //light grey hex code #ddd\r\n            arrayBars[i].style.backgroundColor = 'rgb(0,0,0,0.33)';\r\n        }\r\n        setTimeout(() => {\r\n            this.setState({ sorting: false });\r\n            this.fixColor();\r\n        }, this.state.array.length * ANIMATION_SPEED / ANIMATION_MULTIPLIER);\r\n    }\r\n\r\n    //revert color of bars to default\r\n    fixColor() {\r\n        for (let i = 0; i < this.state.array.length; i++) {\r\n            setTimeout(() => {\r\n                const arrayBars = document.getElementsByClassName('array-bar');\r\n                arrayBars[i].style.backgroundColor = 'rgb(90, 220, 190)';\r\n            }, i / Infinity);\r\n        }\r\n    }\r\n\r\n    mergeSort() {\r\n        if (this.state.sorting) return;\r\n        this.setState({ sorting: true, array: [...this.state.array] });\r\n\r\n        const animations = SortAlgos.mergeSort(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if (i % 3 !== 2) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                let color = '#DEE2FC';\r\n                if (i % 3 !== 0) {\r\n                    color = 'rgb(90, 220, 190)';\r\n                }\r\n                setTimeout(() => {\r\n                    this.switchColor(barOneStyle, barTwoStyle, color);\r\n                }\r\n                    , i * ANIMATION_SPEED / ANIMATION_MULTIPLIER);\r\n            }\r\n            else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED / ANIMATION_MULTIPLIER);\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n            this.sortedColor();\r\n        }, animations.length * ANIMATION_SPEED / ANIMATION_MULTIPLIER);\r\n    }\r\n\r\n\r\n    selectionSort() {\r\n        if (this.state.sorting) return;\r\n        this.setState({ sorting: true, array: [...this.state.array] });\r\n\r\n        const animations = SortAlgos.selectionSort(this.state.array);\r\n        let currIdx = 0, prevBarTwoIdx = -1;\r\n        for (let i = 0; i < animations.length - 1; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if (i % (2 * (this.state.array.length - 1) - currIdx) !== currIdx) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                prevBarTwoIdx = barOneIdx;\r\n                let color = '#DEE2FC';\r\n                if ((i - currIdx) % 2 === 1) {\r\n                    color = 'rgb(90, 220, 190)';\r\n                }\r\n                setTimeout(() => {\r\n                    this.switchColor(barOneStyle, barTwoStyle, color);\r\n                }, i * ANIMATION_SPEED / ANIMATION_MULTIPLIER);\r\n\r\n            } else if (i !== 0) {\r\n                const [barOneVal, barTwoVal] = animations[i];\r\n                const barOneStyle = arrayBars[currIdx].style;\r\n                const barTwoStyle = arrayBars[prevBarTwoIdx].style;\r\n                currIdx += 1;\r\n                let color = 'rgb(90, 220, 190)';\r\n                setTimeout(() => {\r\n                    this.switchColor(barOneStyle, barTwoStyle, color);\r\n                    this.swapHeight(barOneStyle, barTwoStyle, barOneVal, barTwoVal);\r\n                }, i * ANIMATION_SPEED / ANIMATION_MULTIPLIER);\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n            this.sortedColor();\r\n        }, animations.length * ANIMATION_SPEED / ANIMATION_MULTIPLIER);\r\n    }\r\n\r\n\r\n\r\n    quickSort() {\r\n        if (this.state.sorting) return;\r\n        this.setState({ sorting: true, array: [...this.state.array] });\r\n\r\n        const animations = SortAlgos.quickSort(this.state.array);\r\n        let prevBarOneIdx = -1, prevBarTwoIdx = -1, countPivots = 0;\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const [barOneVal, barTwoVal] = animations[i];\r\n            // If pivot changes, change color of previous pivot and new pivot\r\n            if (barTwoVal === -1) {\r\n                const barOneStyle = arrayBars[barOneVal].style;\r\n                countPivots += 1;\r\n                let color = '#E05D5D';\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                }\r\n                    , i * ANIMATION_SPEED / ANIMATION_MULTIPLIER);\r\n            }\r\n            else {\r\n                if ((i + countPivots) % 2 === 0) {\r\n                    prevBarOneIdx = barTwoVal;\r\n                    prevBarTwoIdx = barOneVal;\r\n                    this.modTwoIsZero(arrayBars, barOneVal, barTwoVal, i);\r\n                }\r\n                else {\r\n                    this.modTwoIsOne(arrayBars, barOneVal, barTwoVal, prevBarOneIdx, prevBarTwoIdx, i);\r\n                }\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n            this.sortedColor();\r\n        }\r\n            , animations.length * ANIMATION_SPEED / ANIMATION_MULTIPLIER);\r\n    }\r\n    /*  Used to change color of bars when i % 2 === 0, and swap heights\r\n        of the bars when i % 2 === 1 (entire animations array). */\r\n    modTwoSort(animations) {\r\n        let prevBarOneIdx = -1, prevBarTwoIdx = -1;\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const [barOneVal, barTwoVal] = animations[i];\r\n            if (i % 2 === 0) {\r\n                prevBarOneIdx = barTwoVal;\r\n                prevBarTwoIdx = barOneVal;\r\n                this.modTwoIsZero(arrayBars, barOneVal, barTwoVal, i);\r\n            }\r\n            else {\r\n                this.modTwoIsOne(arrayBars, barOneVal, barTwoVal, prevBarOneIdx, prevBarTwoIdx, i);\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n            this.sortedColor();\r\n        }\r\n            , animations.length * ANIMATION_SPEED / ANIMATION_MULTIPLIER);\r\n    }\r\n    /*  Used to change color of bars when i % 2 === 0. */\r\n    modTwoIsZero(arrayBars, barOneVal, barTwoVal, i) {\r\n        const barOneStyle = arrayBars[barOneVal].style;\r\n        const barTwoStyle = arrayBars[barTwoVal].style;\r\n        let color = '#DEE2FC';\r\n\r\n        setTimeout(() => {\r\n            this.switchColor(barOneStyle, barTwoStyle, color);\r\n        }\r\n            , i * ANIMATION_SPEED / ANIMATION_MULTIPLIER);\r\n    }\r\n    /*  Used to swap heights of the bars when i % 2 === 1. */\r\n    modTwoIsOne(arrayBars, barOneVal, barTwoVal, prevBarOneIdx, prevBarTwoIdx, i) {\r\n        const barOneStyle = arrayBars[prevBarTwoIdx].style;\r\n        const barTwoStyle = arrayBars[prevBarOneIdx].style;\r\n        let color = 'rgb(90, 220, 190)';\r\n\r\n        setTimeout(() => {\r\n            this.switchColor(barOneStyle, barTwoStyle, color);\r\n            this.swapHeight(barOneStyle, barTwoStyle, barOneVal, barTwoVal);\r\n        }\r\n            , i * ANIMATION_SPEED / ANIMATION_MULTIPLIER);\r\n    }\r\n\r\n    switchColor(barOneStyle, barTwoStyle, color) {\r\n        barOneStyle.backgroundColor = color;\r\n        barTwoStyle.backgroundColor = color;\r\n    }\r\n    swapHeight(barOneStyle, barTwoStyle, barOneVal, barTwoVal) {\r\n\r\n        barOneStyle.height = `${barTwoVal}px`;\r\n        barTwoStyle.height = `${barOneVal}px`;\r\n    }\r\n}\r\n","import React from 'react';\nimport SortVisualizer from './SortVisualizer/SortVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortVisualizer>\n      </SortVisualizer>\n    </div>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}